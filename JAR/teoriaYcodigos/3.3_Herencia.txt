-----------------------Herencia---------------------

es específica de la programación orientada a objetos, 
donde una clase nueva se crea a partir de una clase 
existente. La herencia (a la que habitualmente se 
denomina subclase) proviene del hecho de que la 
subclase (la nueva clase creada) contiene las 
atributos y métodos de la clase primaria. La 
principal ventaja de la herencia es la capacidad 
para definir atributos y métodos nuevos para la 
subclase, que luego se aplican a los atributos 
y métodos heredados.

Esta particularidad permite crear una estructura 
jerárquica de clases cada vez más especializada. 
La gran ventaja es que uno ya no debe comenzar 
desde cero cuando desea especializar una clase 
existente. Como resultado, se pueden adquirir 
bibliotecas de clases que ofrecen una base 
que puede especializarse a voluntad 
(la compañía que vende estas clases tiende a 
proteger las datos miembro usando la encapsulación).

--> Jerarquía de clase <--
La relación padre-hijo entre clases puede representarse 
desde un punto de vista jerárquico, denominado 
vista de clases en árbol. La vista en árbol comienza 
con una clase general llamada superclase (a la que 
algunas veces se hace referencia como clase primaria, 
clase padre, clase principal, o clase madre; existen 
muchas metáforas genealógicas). Las clases derivadas 
(clase secundaria o subclase) se vuelven cada vez más 
especializadas a medida que van descendiendo en el árbol. 
Por lo tanto, se suele hacer referencia a la relación que 
vincula una clase secundaria con una clase primaria 
mediante la frase es una x o y.

--> Herencia múltiple <--
Algunos lenguajes orientados a objetos, como C++ 
permiten herencias múltiples, lo que significa 
que una clase puede heredar los atributos de otras dos 
superclases. Este método puede utilizarse para agrupar 
atributos y métodos desde varias clases dentro de 
una sola.